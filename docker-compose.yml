version: '3.8'

services:
  # Redis for job queue
  redis:
    image: redis:7-alpine
    container_name: pdf-converter-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: pdf-converter-backend
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
      - FRONTEND_URL=http://localhost:3000
      - LOG_LEVEL=info
      - STORAGE_DIR=/app/uploads
      - FILE_TTL_MINUTES=30
    volumes:
      - ./backend:/app
      - ./uploads:/app/uploads
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PDF Tools Worker
  pdf-worker:
    build:
      context: ./workers
      dockerfile: Dockerfile.pdf
    container_name: pdf-converter-pdf-worker
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
      - WORKER_TYPE=pdf-tools
      - MAX_CONCURRENT_JOBS=4
      - LOG_LEVEL=info
    volumes:
      - ./uploads:/app/uploads
      - ./outputs:/app/outputs
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'

  # Office to PDF Worker
  office-worker:
    build:
      context: ./workers
      dockerfile: Dockerfile.office
    container_name: pdf-converter-office-worker
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
      - WORKER_TYPE=office2pdf
      - MAX_CONCURRENT_JOBS=2
      - LOG_LEVEL=info
    volumes:
      - ./uploads:/app/uploads
      - ./outputs:/app/outputs
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'

  # Image Processing Worker
  image-worker:
    build:
      context: ./workers
      dockerfile: Dockerfile.image
    container_name: pdf-converter-image-worker
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
      - WORKER_TYPE=image-processing
      - MAX_CONCURRENT_JOBS=3
      - LOG_LEVEL=info
    volumes:
      - ./uploads:/app/uploads
      - ./outputs:/app/outputs
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 3G
          cpus: '2.0'

  # Frontend (Development)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: pdf-converter-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:5000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: pdf-converter-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./uploads:/var/www/uploads:ro
      - ./outputs:/var/www/outputs:ro
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    profiles:
      - production

volumes:
  redis_data:
    driver: local

networks:
  default:
    name: pdf-converter-network
    driver: bridge
